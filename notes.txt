passo-a-passo:

// no REACT, tudo que será renderizado (componentes) são basicamente funções (quem podem ser classes também) ou seja: tudo que é retornado de uma função, é renderizado na tela como um componente e suas ações.

O 1° passo aqui foi:
-importar 'Component' de 'react' para que possamos usar a declaração de 'class' ao invés de 'functions'.
-com isso extendemos a usabilidade da 'class App' para 'Component' e obrigatoriamente precisamos renderizar essa usabilidade usando um método chamado 'render' e centro dele, retornamos que queremos renderizar sempre que a 'class App' for chamada.

Agora, o 2° passo foi substitutir o link por um botão. 

-Toda vez que esse botão for clicado, o nome na tag <p> acima, será alterado para outro nome.
Usarei o método 'constructor' (disponível nos componentes de classe que importamos anteriormente.).
Isso quer dizer que, sempre que a classe for resderizada, o constructor será executado primeiro.
Dentro do 'constructor' vou chamar um outro método 'super(){}', então sempre que super for chamado, ele instanciará o 'constructor' que renderizará a 'class' que o contém.
-logo abaixo eu vou criar um objeto com um atributo 'name' e um valor para este atributo. Para que ele se torne um objeto local, eu usei o 'this.state = {name: 'nome da pessoa que será construído para ser referenciado e renderizado pela 'class App'.  }
-para que esse valor do atributo dentro do objeto seja acessado, eu uso {} e referencio esse valor onde eu quiser neste bloco ('class App') pois este valor foi criado localmente quando usei o 'this.state', ou seja, "neste estado(bloco) eu tenho um objeto chamado 'state' e nele eu tenho atributos que podem ser acessados aqui dentro."
Então a tag <p> pode usar esse valor sendo referenciado assim: "{ this.state.name }", logo, a tag <p> renderiza o valor de 'name' dentro do objeto 'state' que foi criado pelo 'construtor' usando o atributo 'super()'.

- Agora vou mudar o estado:

-a ideia é que, sempre que <button> for clicado, o nome deve ser alterado para outro valor, ou seja, 'this.state.name' deve ter seu valor alterado.
-Usando um manipulador de eventos eu posso capturar o clique do botão.
-Para isso eu usarei o 'onClick' para vigiar os cliques do botão. O 'onClick' neste caso espera uma função, ou seja, será disparada uma função sempre que o botão for clicado. A sintaxe é essa: 'onClick{() => {}}' Ess processo é chamado de RE RENDERIZAÇÃO pois algo será atualizado na tela baseado em um estado anterior. Aqui precisamos verificar sobre onde o 'this.state.name' aponta pois neste caso precisamos atribuir um novo valor de uma forma diferente de "this.state.name = 'André'" pois mesmo que aqui o valor tenha sido alterado, 'state.name' ainda aponta para o valor que foi definido anteriormente e ele não será atualizado da forma falei acima.
-Para resolver esse problema vamos usar uma forma de criar um novo obj para receber um atributo e guardar um novo valor. Usarei o setstate() como uma mesclagem superficial, ou seja, qualquer valor que eu atribuir a ele, será renderizado pois vai substituir o 'state.name', assim: 
<button 
  onClick={() => {
  this.setState({name: 'Guilherme'})
  }} >Change Name
</button>
- Aqui estou setando o valor que tem em 'this.state.name' e dando um novo valor para 'name', isso fará com que o 'React' saiba que aqui ele deve procurar um objeto com o mesmo atributo(chave), atualizá-lo e renderizá-lo novamente com o novo valor.
-Agora vou resolver um problema: precisamos transformar a coleta de dados do objeto (ao clique do botão) para uma função.
-Se repararmos, um console.log logo abaixo do callback do botão (onClick), mostra quando clicado uma vez, os dados do objeto antigo, mesmo os dados sendo atualizados na tela, ou seja, ele está sendo chamado depois que o segundo clique acontece e não no primeiro clique, isso que dizer que o console.log se refere ao primeiro dado no objeto e não para o objeto atual (depois do primeiro clique e atualiza). Então vou substituir os cados coletados no 'setState' por uma função(com callback) antes do objeto ser renderizado.
- 'this.setState(()=> {}, ()=> {});'
-  o primeiro argumento (função) é a que vai atualizar o objeto, ou seja, uma função que vai ter como retorno a atualização do objeto:
- this.setState(()=> {
                return {
                  name: { firstName: 'Andrei', lastName: 'Neaogie' },
                }
              }, ()=> {});
- desta forma, a atualização acontece normalmente, agora vou resolver o problema do console.log não imprimir a atualização no primeiro clique.
- é o que o segundo argumento (função) vai fazer.
<button
            onClick={() => {
              this.setState(
                () => {
                  return {
                    name: { firstName: "Andrei", lastName: "Neaogie" },
                  };
                },
                () => {
                  console.log(this.state);
                }
              );

            }}
          >
            Change Name
          </button>
- basta colocar o 'console.log' como retorno do segundo argumento (função) do callback da função (onclick) :) Desse modo, encapsulei a atualização do componente junto do 'console.log' pra eu ver exatamente sua mudança no console.
_______________________________________________________________________________
Agora vou começar a construir a base para o meu projeto 'myAppMonsters'
-- Primeiro eu criei uma estrutura que faz um teste que recebe nomes de 3 monstros diferentes para simular uma API.
-- Na renderização, eu criei 3 'h1' e atribui o objeto para cada um deles:
this.state = {
      monster1: {
        name: 'Linda'
      },
      monster2: {
        name: 'Frank'
      },
      monster3: {
        name: 'Jacky'
      },
    };
  }
  render() {
    return <div className="App">
      <h1>{this.state.monster1.name}</h1>
      <h1>{this.state.monster2.name}</h1>
      <h1>{this.state.monster3.name}</h1>

    </div>;
  }

-- Mas a estrutura fica repetitiva pois a ideia é ter muitos objetos e também ter muitos monstros exibidos na tela.
-- Para resolver isso: 
- Primeiro eu vou colocar os objetos (monster1, monster2 e monster3) em um array:
this.state = {
      monsters: [
        {
          name: 'Linda'
        },
        {
          name: 'Frank'
        },
        {
          name: 'Jacky'
        },
      ]
    };

--- Agora preciso acessar esse array e convertê-los em tags <h1>:
-- Para isso eu vou usar o 'map()' que é um método usado nos arrays.
-Assim vamos poder acessar os dados do array.
- Crio as '{}' para que dentro dele eu crio o 'map()' para pegar o que eu quero neste array e criar a tag que vai renderizar na tela.
  return <div className="App">
      {
        this.state.monsters.map()
      }
    </div>;

--- Resumindo: Note que, o this.state ainda é uma definição de objeto, dentro dele eu tenho uma chave 'monsters' que leva uma estrutura de array, por isso nós vamos iterar sobre ele para retirar o que precisamos.
-- O '.map()' vai usar um callback de uma estrutura de arrowfunctions que vai retornar um elemento a cada iteração no array:
this.state.monsters.map( () => {} )
-Então aqui dentro eu vou dizer 'state que guarda o array 'monsters', eu vou mapear dentro de vc e pegar o valor que está atribuído a 'nome' e colocar em uma variável 'temporária' chamada 'monster' e a cada vez que eu fizer isso, como estou usando uma função de retorno, você vai me devolver um <h1> com o conteúdo dentro, ou seja, o 'monster.name':
<div className="App">
        {
          this.state.monsters.map((monster) => {
            return <h1>{monster.name}</h1>
          })
        }
      </div>
-- Mas, vamos notar no console do navegador que temos um aviso sobre uma 'key' prop.
- Essa 'key' é uma propriedade para identificar cada elemento de um array ou objeto. Ela é nedessária pois pode haver mais de um nome que são iguais e se forem iguais, o código pode não carregar ele em tela ou carregar todos, depende do escopo e do que o código precisa retornar.
--Para sanar esse erro eu usei a 'key={}' como uma propriedade da tag <h1>:
<h1 key={monster.name}>{monster.name}</h1>
--Mas isso poderia gerar um outro problema, se houver muitos dados, eu tenho que tomar cuidado na hora de declarar esses dados ou na hora que retornar os dados do array ou API, pois são muitos. Por isso eu vou adicionar a esse primeiro teste um identificador para cada objeto dentro deste array para que ele possa ser usado como 'key' e trazer o valor exato no qual ele se refere, pois um identificador não pode se repetir em um conjunto de dados ou em uma API:
return <h1 key={monster.id}>{monster.name}</h1>
--Para seguir uma coerência nos dados rendedrizados, vou incluir uma div contendo a 'key' e o 'h1' dentro dele contendo o conteúdo buscado no map:
return <div key={monster.id}><h1>{monster.name}</h1></div>




